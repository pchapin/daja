<?xml version="1.0"?>  
<?xml-model href="http://docbook.org/xml/5.1/rng/docbookxi.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:id="build">
  <title>Building Daja</title>

  <para>This chapter describes how to build Daja and its associated documentation and how to run
    the tests. We also describe various issues related to the tool chain in general, such as
    setting up a continuous integration server and the use of style tools and advanced static
    analysis tools. This chapter is intended for Daja contributors or power users who wish to
    build the system from the source code repository. If you are using a binary distribution you
    can skip this section entirely.</para>

  <para>The README at the top level of the Daja source tree gives a summary of the steps
    included here. The README is intended as a kind of "quick start" document. The information
    here is a more detailed version of the information in the top level README.</para>

  <para>The tools with specific version numbers shown below are the official tools used by the
    Daja contributors. Other tools (or other versions of the same tools) may also work.
    Obviously the greater the differences between the tools you attempt to use and those listed
    below the more problems you are likely to encounter.</para>

  <variablelist>
    <title>Build Tools</title>

    <varlistentry>
      <term><link
        xlink:href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java
        Development Kit</link></term>
      <listitem>
        <para>We use JDK v21.0.3. A full JDK is necessary, and not just a JRE, because the Daja
          code base includes some Java files.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link xlink:href="http://www.scala-lang.org/">Scala Compiler</link></term>
      <listitem>
        <para>We use Scala v3.3.4. The Scala compiler is executed indirectly via the SBT build
          tool. You do not need to download and install Scala separately. SBT will take care of
          that detail when it downloads the other project dependencies.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link xlink:href="http://www.docbook.org/">DocBook</link></term>
      <listitem>
        <para>The Daja documentation is written in DocBook. This is an XML format and so is
          readable (and writable) in an ordinary text editor. However, if you want to build
          nicely formatted documentation or benefit from a more advanced editing features, you
          will need a tool chain for processing DocBook. We currently use <link
          xlink:href="http://oxygenxml.com/">&lt;oXygen/&gt;</link> as our primary DocBook
          editing tool.</para>

        <para>IntelliJ can also edit DocBook using its general support for XML. Emacs's nXML
          mode is also useful. To set up IntelliJ for DocBook first download and unpack the
          DocBook XML DTD distribution. Next set up IntelliJ as described below.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link xlink:href="http://www.jetbrains.com/idea/">IntelliJ IDEA</link></term>
      <listitem>
        <para>We use IntelliJ IDEA, Community Edition, version 2024.3.1.1 with the IntelliJ
          Scala plugin developed by JetBrains as our integrated development environment. The
          plugin can be installed from inside IntelliJ once the main IDE is installed.</para>

        <para>IntelliJ should automatically recognize and import the SBT build configuration, so
          simply opening the folder containing <filename>build.sbt</filename> should result in a
          functional configuration for the IDE.</para>

        <para>In addition, set the DOCBOOK_XML variable inside IntelliJ to point at the folder
          containing your DocBook XML DTD. It is used by IntelliJ's DocBook editor to locate the
          DTD so it can do validation of the DocBook content.</para>

        <para>We also recommend installing the ANTLR v4 grammar plugin and the Markdown editing
          plugin from the IntelliJ plugin repository. While not required these plugins can make
          editing some of the supporting files and documents more pleasant.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link xlink:href="http://llvm.org">LLVM</link></term>
      <listitem>
        <para>Daja uses the LLVM v19 compiler back-end framework as a target for its code
          generator. Only the back-end tools are needed. Setting up LLVM is outside the current
          scope of this document; see the LLVM web site for more information. <emphasis>TODO:
          Describe how to set up LLVM.</emphasis></para>

        <para>At this time LLVM is not strictly necessary as no back-end code generation is
          currently being done.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link xlink:href="http://jenkins-ci.org/">Jenkins</link></term>
      <listitem>
        <para>We use Jenkins as our continuous integration system. Our practice is to run
          Jenkins from the <link xlink:href="http://glassfish.java.net/">Glassfish</link>
          application server. You do not need to set up Jenkins if you are a single developer.
          <emphasis>TODO: Give more details about setting up Glassfish and
          Jenkins.</emphasis></para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>In addition to the tools above we may in the future make use of various additional tools
    to improve the quality of the Daja code base. These tools might include, for example, <link
    xlink:href="http://babelfish.arc.nasa.gov/trac/jpf">Java Pathfinder</link>, and <link
    xlink:href="https://github.com/mdr/scalariform">Scalariform</link>. More information will be
    provided about setting up these tools when (and if) they are employed.</para>

  <para>You can use IntelliJ's integrated Git support to check out the Daja project from <link
    xlink:href="https://github.com/pchapin/daja.git"/>. Before you can build the project you
    need to populate the <literal>lib</literal> folder (see the README). You also need to
    manually generate the Daja parser by running
    <filename>bin/build-daja-parser.{bat,sh}</filename> from the root folder of the project. You
    can then use IntelliJ to do a full build of the project.</para>

  <para><emphasis>TODO: Say something about testing!</emphasis></para>

</chapter>
